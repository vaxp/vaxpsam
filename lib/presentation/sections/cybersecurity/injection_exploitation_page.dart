import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:vaxpsam/presentation/widgets/rotating_background.dart';
import '../../../infrastructure/providers.dart';
import '../../home/widgets/section_widgets.dart';
import '../../console/console_utils.dart';
import '../../theme/app_theme.dart';

class InjectionExploitationPage extends ConsumerWidget {
  const InjectionExploitationPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final system = ref.read(systemServiceProvider);
    
    return StaticBackground(
      child: Scaffold(
        backgroundColor: Colors.transparent,
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 200,
            floating: false,
            pinned: true,
            backgroundColor: macAppStoreDark,
            flexibleSpace: FlexibleSpaceBar(
              background: _buildHeroSection(context),
            ),
          ),
          SliverToBoxAdapter(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInstallAllSection(context, system),
                _buildToolsGrid(context, system),
                const SizedBox(height: 20),
              ],
            ),
          ),
        ],
      ),
    ),);
  }

  Widget _buildHeroSection(BuildContext context) {
    return Container(
      height: 200,
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Color(0xFFFF9800), Color(0xFFFFB74D)],
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Stack(
        children: [
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: const LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFFFF9800), Color(0xFFFFB74D)],
                ),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text(
                  'INJECTION & EXPLOITATION',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: Colors.white70,
                    letterSpacing: 1.2,
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  'Penetration Testing Tools',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  '16 professional tools for web application testing, password cracking, and exploitation.',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInstallAllSection(BuildContext context, system) {
    return Container(
      margin: const EdgeInsets.all(16),
      child: MacAppStoreCard(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.download,
                  color: macAppStoreBlue,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Install All Exploitation Tools',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Install all 16 injection & exploitation tools at once',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: macAppStoreGray,
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () => _installAllTools(context, system),
                  icon: const Icon(Icons.install_desktop),
                  label: const Text('Install All'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: macAppStoreBlue,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildToolsGrid(BuildContext context, system) {
    final tools = [
      {'name': 'sqlmap', 'package': 'sqlmap', 'description': 'Automates SQL injection and detects vulnerabilities'},
      {'name': 'Dirb', 'package': 'dirb', 'description': 'Scans for hidden files and directories on the web'},
      {'name': 'Nikto', 'package': 'nikto', 'description': 'Scans for known vulnerabilities in web servers'},
      {'name': 'Gobuster', 'package': 'gobuster', 'description': 'Fast bruteforcing tool for directory and subdirectory names'},
      {'name': 'John the Ripper', 'package': 'john', 'description': 'Powerful password cracking tool'},
      {'name': 'OpenSSL', 'package': 'openssl', 'description': 'Working with SSL/TLS certificates and testing encryption'},
      {'name': 'Searchsploit', 'package': 'exploitdb', 'description': 'Search for exploits in the Exploit-DB database'},
      {'name': 'Wget', 'package': 'wget', 'description': 'Download web pages (useful for crawling)'},
      {'name': 'Curl', 'package': 'curl', 'description': 'Connect to web servers and test APIs'},
      {'name': 'Dnsenum', 'package': 'dnsenum', 'description': 'Collect comprehensive DNS information'},
      {'name': 'Sublist3r', 'package': 'sublist3r', 'description': 'Subdomain enumeration'},
      {'name': 'WhatWeb', 'package': 'whatweb', 'description': 'Identify website technologies (CMS, libraries, etc.)'},
      {'name': 'Medusa', 'package': 'medusa', 'description': 'Fast login guesser for various services (SSH, FTP, etc.)'},
      {'name': 'Hydra', 'package': 'hydra', 'description': 'Parallel protocol login guesser'},
      {'name': 'Ffuf', 'package': 'ffuf', 'description': 'Fast and flexible web fuzzing tool'},
      {'name': 'Cewl', 'package': 'cewl', 'description': 'Create custom password lists from a website'},
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Text(
            'Injection & Exploitation Tools',
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 4,
            childAspectRatio: 1.1,
            mainAxisSpacing: 16,
            crossAxisSpacing: 16,
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16),
          itemCount: tools.length,
          itemBuilder: (context, index) {
            final tool = tools[index];
            return AppGridCard(
              title: tool['name']!,
              description: tool['description']!,
              icon: Container(
                decoration: BoxDecoration(
                  color: const Color(0xFFFF9800),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(Icons.bug_report, color: Colors.white),
              ),
              onTap: () => showConsoleStream(context, system.installPackageByName(tool['package']!)),
            );
          },
        ),
      ],
    );
  }

  void _installAllTools(BuildContext context, system) {
    final tools = [
      'sqlmap', 'dirb', 'nikto', 'gobuster', 'john',
      'openssl', 'exploitdb', 'wget', 'curl', 'dnsenum',
      'sublist3r', 'whatweb', 'medusa', 'hydra',
      'ffuf', 'cewl'
    ];

    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Install All Exploitation Tools'),
        content: Text('This will install ${tools.length} injection & exploitation tools. Continue?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(ctx).pop();
              showConsoleStream(context, system.runAsRoot(['apt', 'update', '&&', 'apt', 'install', '-y', ...tools]));
            },
            child: const Text('Install All'),
          ),
        ],
      ),
    );
  }
}
