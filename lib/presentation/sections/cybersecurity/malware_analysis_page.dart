import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:vaxpsam/presentation/widgets/rotating_background.dart';
import '../../../infrastructure/providers.dart';
import '../../home/widgets/section_widgets.dart';
import '../../console/console_utils.dart';
import '../../theme/app_theme.dart';

class MalwareAnalysisPage extends ConsumerWidget {
  const MalwareAnalysisPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final system = ref.read(systemServiceProvider);
    
      return StaticBackground(
      child: Scaffold(
        backgroundColor: Colors.transparent,
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 200,
            floating: false,
            pinned: true,
            backgroundColor: macAppStoreDark,
            flexibleSpace: FlexibleSpaceBar(
              background: _buildHeroSection(context),
            ),
          ),
          SliverToBoxAdapter(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInstallAllSection(context, system),
                _buildToolsGrid(context, system),
                const SizedBox(height: 20),
              ],
            ),
          ),
        ],
      ),
    ),);
  }

  Widget _buildHeroSection(BuildContext context) {
    return Container(
      height: 200,
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Color(0xFFD32F2F), Color(0xFFF44336)],
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Stack(
        children: [
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: const LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFFD32F2F), Color(0xFFF44336)],
                ),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text(
                  'MALWARE ANALYSIS',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: Colors.white70,
                    letterSpacing: 1.2,
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  'Forensic & Analysis Tools',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  '25 professional tools for reverse engineering, forensics, and malware detection.',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInstallAllSection(BuildContext context, system) {
    return Container(
      margin: const EdgeInsets.all(16),
      child: MacAppStoreCard(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.download,
                  color: macAppStoreBlue,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Install All Malware Analysis Tools',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Install all 25 malware analysis tools at once',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: macAppStoreGray,
                        ),
                      ),
                    ],
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () => _installAllTools(context, system),
                  icon: const Icon(Icons.install_desktop),
                  label: const Text('Install All'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: macAppStoreBlue,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildToolsGrid(BuildContext context, system) {
    final tools = [
      {'name': 'Radare2 (r2)', 'package': 'radare2', 'description': 'Powerful reverse engineering framework'},
      {'name': 'GDB', 'package': 'gdb', 'description': 'Basic debugger for runtime analysis'},
      {'name': 'Binwalk', 'package': 'binwalk', 'description': 'Analyzes binary files, especially firmware'},
      {'name': 'ClamAV', 'package': 'clamav', 'description': 'Open-source virus scanning engine'},
      {'name': 'Strace', 'package': 'strace', 'description': 'Traces system calls'},
      {'name': 'Ltrace', 'package': 'ltrace', 'description': 'Traces user library calls'},
      {'name': 'Python', 'package': 'python3', 'description': 'Basic programming language for automating analysis'},
      {'name': 'GCC', 'package': 'gcc', 'description': 'Compiler for compiling code and tools'},
      {'name': 'File', 'package': 'file', 'description': 'Determines file type'},
      {'name': 'Strings', 'package': 'binutils', 'description': 'Extracts printable text from binary files'},
      {'name': 'Objdump', 'package': 'binutils', 'description': 'Displays information about executable files'},
      {'name': 'Readelf', 'package': 'binutils', 'description': 'Displays information about ELF files'},
      {'name': 'Foremost', 'package': 'foremost', 'description': 'File recovery tool, useful for analyzing evidence'},
      {'name': 'Chkrootkit', 'package': 'chkrootkit', 'description': 'Rootkits detection tool'},
      {'name': 'Rkhunter', 'package': 'rkhunter', 'description': 'Rootkits and malware detection tool'},
      {'name': 'Unzip', 'package': 'unzip', 'description': 'Unzip tool for decompressing suspicious content'},
      {'name': 'Tar', 'package': 'tar', 'description': 'Toolkit for handling file archives'},
      {'name': 'Sleuth Kit', 'package': 'sleuthkit', 'description': 'Digital forensics toolkit'},
      {'name': 'TestDisk', 'package': 'testdisk', 'description': 'Hard disk partition recovery tool'},
      {'name': 'Autopsy', 'package': 'autopsy', 'description': 'Graphical interface for Sleuth Kit'},
      {'name': 'Xxd', 'package': 'xxd', 'description': 'Create a hexadecimal (Hex Dump) view of a file'},
      {'name': 'Hexdump', 'package': 'bsdmainutils', 'description': 'Display file contents in hexadecimal format'},
      {'name': 'Gzip/Bzip2', 'package': 'gzip', 'description': 'Compressing and decompressing files'},
      {'name': 'Libimobiledevice', 'package': 'libimobiledevice', 'description': 'Analyzes iOS devices (behavioral analysis)'},
      {'name': 'Adb', 'package': 'android-tools-adb', 'description': 'Android debugging bridge (for analyzing application behavior)'},
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Text(
            'Malware Analysis Tools',
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 4,
            childAspectRatio: 1.1,
            mainAxisSpacing: 16,
            crossAxisSpacing: 16,
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16),
          itemCount: tools.length,
          itemBuilder: (context, index) {
            final tool = tools[index];
            return AppGridCard(
              title: tool['name']!,
              description: tool['description']!,
              icon: Container(
                decoration: BoxDecoration(
                  color: const Color(0xFFD32F2F),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(Icons.security, color: Colors.white),
              ),
              onTap: () => showConsoleStream(context, system.installPackageByName(tool['package']!)),
            );
          },
        ),
      ],
    );
  }

  void _installAllTools(BuildContext context, system) {
    final tools = [
      'radare2', 'gdb', 'binwalk', 'clamav', 'strace',
      'ltrace', 'python3', 'gcc', 'file', 'binutils',
      'foremost', 'chkrootkit', 'rkhunter', 'unzip',
      'tar', 'sleuthkit', 'testdisk', 'autopsy',
      'xxd', 'bsdmainutils', 'gzip', 'libimobiledevice',
      'android-tools-adb'
    ];

    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Install All Malware Analysis Tools'),
        content: Text('This will install ${tools.length} malware analysis tools. Continue?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(ctx).pop();
              showConsoleStream(context, system.runAsRoot(['apt', 'update', '&&', 'apt', 'install', '-y', ...tools]));
            },
            child: const Text('Install All'),
          ),
        ],
      ),
    );
  }
}
